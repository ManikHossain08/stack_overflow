<p>I get this error whenever I add some table to my database. If I delete my game and install it again, I don't get that error, so there is that table. I tried to change database version to 2 instead of 1, but it gets updated but still get the error. What's the problem? Here's logcat:</p>

<pre><code>04-17 20:01:08.117: D/szipinf(10494): Initializing inflate state
04-17 20:01:08.217: D/szipinf(10494): Initializing inflate state
04-17 20:01:08.227: D/szipinf(10494): Initializing zlib to inflate
04-17 20:01:10.277: E/DataBaseHelper(10494): database updated
04-17 20:01:10.507: I/Database(10494): sqlite returned: error code = 1, msg = no such table: tblLogicTest
04-17 20:01:10.507: E/DataAdapter(10494): getTestData >>android.database.sqlite.SQLiteException: no such table: tblLogicTest: , while compiling: SELECT * FROM tblLogicTest WHERE 1 = 1  ORDER BY _ID ASC
04-17 20:01:10.507: D/AndroidRuntime(10494): Shutting down VM
04-17 20:01:10.507: W/dalvikvm(10494): threadid=1: thread exiting with uncaught exception (group=0x40018560)
04-17 20:01:10.527: E/AndroidRuntime(10494): FATAL EXCEPTION: main
04-17 20:01:10.527: E/AndroidRuntime(10494): java.lang.RuntimeException: Unable to start activity ComponentInfo{rs.androidaplikacije.themostcompleteiqtest/rs.androidaplikacije.themostcompleteiqtest.LogicTest}: android.database.sqlite.SQLiteException: no such table: tblLogicTest: , while compiling: SELECT * FROM tblLogicTest WHERE 1 = 1  ORDER BY _ID ASC
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread.performLaunchActivity(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread.access$1500(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread$H.handleMessage(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.os.Handler.dispatchMessage(Handler.java:99)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.os.Looper.loop(Looper.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread.main(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at java.lang.reflect.Method.invokeNative(Native Method)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at java.lang.reflect.Method.invoke(Method.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at com.android.internal.os.ZygoteInit.main(ZygoteInit.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at dalvik.system.NativeStart.main(Native Method)
04-17 20:01:10.527: E/AndroidRuntime(10494): Caused by: android.database.sqlite.SQLiteException: no such table: tblLogicTest: , while compiling: SELECT * FROM tblLogicTest WHERE 1 = 1  ORDER BY _ID ASC
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteCompiledSql.native_compile(Native Method)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteCompiledSql.compile(SQLiteCompiledSql.java:92)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteCompiledSql.<init>(SQLiteCompiledSql.java:65)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java:83)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteQuery.<init>(SQLiteQuery.java:49)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteDirectCursorDriver.query(SQLiteDirectCursorDriver.java:42)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(SQLiteDatabase.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.database.sqlite.SQLiteDatabase.rawQuery(SQLiteDatabase.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at rs.androidaplikacije.themostcompleteiqtest.TestAdapter.getTestDataLogic(TestAdapter.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at rs.androidaplikacije.themostcompleteiqtest.LogicTest.nextQuestion(LogicTest.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at rs.androidaplikacije.themostcompleteiqtest.LogicTest.onCreate(LogicTest.java:93)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.Instrumentation.callActivityOnCreate(Instrumentation.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    at android.app.ActivityThread.performLaunchActivity(ActivityThread.)
04-17 20:01:10.527: E/AndroidRuntime(10494):    ... 11 more
</code></pre>

<p>Database helper:</p>

<pre><code>public class DataBaseHelper extends SQLiteOpenHelper
{
private static String TAG = "DataBaseHelper"; // Tag just for the LogCat window
//destination path (location) of our database on device
private static String DB_PATH = "/data/data/rs.androidaplikacije.themostcompleteiqtest/databases/"; 
private static String DB_NAME ="pitanja.sqlite";// Database name
private static SQLiteDatabase mDataBase; 
private final Context mContext;
private static final int DATABASE_VERSION = 3;

public DataBaseHelper(Context mojContext) 
{
    super(mojContext, DB_NAME, null, 3);// 1 it's Database Version
    DB_PATH = mojContext.getApplicationInfo().dataDir + "/databases/";
    this.mContext = mojContext;
}

public void createDataBase() throws IOException
{
    //If database not exists copy it from the assets


        this.getReadableDatabase();
        this.close();
        try 
        {
            //Copy the database from assests
            copyDataBase();
            Log.e(TAG, "createDatabase database created");
        } 
        catch (IOException mIOException) 
        {
            throw new Error("ErrorCopyingDataBase");
        }
    }

/**
 * Check if the database already exist to avoid re-copying the file each time you open the application.
 * @return true if it exists, false if it doesn't
 */
public boolean checkDataBase(){

SQLiteDatabase checkDB = null;

try{
String myPath = DB_PATH + DB_NAME;
checkDB = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);

}catch(SQLiteException e){

//database does't exist yet.

}

if(checkDB != null){

checkDB.close();

}

return checkDB != null ? true : false;
}
    /*Check that the database exists here: /data/data/your package/databases/Da Name
    private boolean checkDataBase()
    {
        File dbFile = new File(DB_PATH + DB_NAME);
        //Log.v("dbFile", dbFile + "   "+ dbFile.exists());
        return dbFile.exists();
    }
    */

    //Copy the database from assets
    private void copyDataBase() throws IOException
    {
        InputStream mInput = mContext.getAssets().open(DB_NAME);
        String outFileName = DB_PATH + DB_NAME;
        OutputStream mOutput = new FileOutputStream(outFileName);
        byte[] mBuffer = new byte[1024];
        int mLength;
        while ((mLength = mInput.read(mBuffer))>0)
        {
            mOutput.write(mBuffer, 0, mLength);
        }
        mOutput.flush();
        mOutput.close();
        mInput.close();
    }

    //Open the database, so we can query it
    public boolean openDataBase() throws SQLException
    {
        String mPath = DB_PATH + DB_NAME;
        //Log.v("mPath", mPath);
        mDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.CREATE_IF_NECESSARY);
        //mDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
        return mDataBase != null;
    }
    @Override
    public void close() 
    {
        if(mDataBase != null)
            mDataBase.close();
        super.close();
    }

    @Override
    public void onCreate(SQLiteDatabase arg0) {
        }

    @Override
    public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
        try {
            // delete existing?

            // Copy the db from assests
            copyDataBase();
            Log.e(TAG, "database updated");
        } catch (IOException mIOException) {
            Log.e(TAG, mIOException.toString());
            try {
                throw mIOException;
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

}
</code></pre>

<p>Adapter:</p>

<pre><code>public class TestAdapter 
{
    protected static final String TAG = "DataAdapter";

    private final Context mContext;
    private SQLiteDatabase mDb;
    private DataBaseHelper mDbHelper;

    public TestAdapter(Context context) 
    {
        this.mContext = context;
        mDbHelper = new DataBaseHelper(mContext);
    }

    public TestAdapter createDatabase() throws SQLException 
    {
        try 
        {
            mDbHelper.createDataBase();
        } 
        catch (IOException mIOException) 
        {
            Log.e(TAG, mIOException.toString() + "  UnableToCreateDatabase");
            throw new Error("UnableToCreateDatabase");
        }
        return this;
    }

    public TestAdapter open() throws SQLException 
    {
        try 
        {
            mDbHelper.openDataBase();
            mDbHelper.close();
            mDb = mDbHelper.getReadableDatabase();
        } 
        catch (SQLException mSQLException) 
        {
            Log.e(TAG, "open >>"+ mSQLException.toString());
            throw mSQLException;
        }
        return this;
    }

    public void close() 
    {
        mDbHelper.close();
    }

     public Cursor getTestDataMDPI(String whereClause)
     {;
         try
         {
             String sql ="SELECT * FROM tblPitanjaDanskaMDPI WHERE 1 = 1 " + whereClause + " ORDER BY _ID ASC";

             Cursor mCur = mDb.rawQuery(sql, null);
             if (mCur!=null)
             {
                mCur.moveToNext();
             }
             return mCur;
         }
         catch (SQLException mSQLException) 
         {
             Log.e(TAG, "getTestData >>"+ mSQLException.toString());
             throw mSQLException;
         }
     }
     public Cursor getTestDataHDPI(String whereClause)
     {;
         try
         {
             String sql ="SELECT * FROM tblPitanjaDanskaHDPI WHERE 1 = 1 " + whereClause + " ORDER BY _ID ASC";

             Cursor mCur = mDb.rawQuery(sql, null);
             if (mCur!=null)
             {
                mCur.moveToNext();
             }
             return mCur;
         }
         catch (SQLException mSQLException) 
         {
             Log.e(TAG, "getTestData >>"+ mSQLException.toString());
             throw mSQLException;
         }
     }
     public Cursor getTestDataLogic(String whereClause)
     {;
         try
         {
             String sql ="SELECT * FROM tblLogicTest WHERE 1 = 1 " + whereClause + " ORDER BY _ID ASC";

             Cursor mCur = mDb.rawQuery(sql, null);
             if (mCur!=null)
             {
                mCur.moveToNext();
             }
             return mCur;
         }
         catch (SQLException mSQLException) 
         {
             Log.e(TAG, "getTestData >>"+ mSQLException.toString());
             throw mSQLException;
         }
     }
}
</code></pre>
