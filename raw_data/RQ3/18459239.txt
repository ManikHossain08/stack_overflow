<p>My application stops when I'm switching thru any fragments (using Page Viewer ) . Basically, I can't swipe to any fragment at all without the application to stop. The error that I'm getting is " Unfortunately, TestareNou has stopped " .</p>

<p>Here is my MainActivity Class's code : </p>

<pre><code>package com.example.testarenou;

import java.util.Locale;

import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class MainActivity extends FragmentActivity implements ActionBar.TabListener {

/**
 * The {@link android.support.v4.view.PagerAdapter} that will provide
 * fragments for each of the sections. We use a
 * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which
 * will keep every loaded fragment in memory. If this becomes too memory
 * intensive, it may be best to switch to a
 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
 */
SectionsPagerAdapter mSectionsPagerAdapter;

/**
 * The {@link ViewPager} that will host the section contents.
 */
ViewPager mViewPager;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // Set up the action bar.
    final ActionBar actionBar = getActionBar();
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

    // Create the adapter that will return a fragment for each of the three
    // primary sections of the app.
    mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

    // Set up the ViewPager with the sections adapter.
    mViewPager = (ViewPager) findViewById(R.id.pager);
    mViewPager.setAdapter(mSectionsPagerAdapter);

    // When swiping between different sections, select the corresponding
    // tab. We can also use ActionBar.Tab#select() to do this if we have
    // a reference to the Tab.
    mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
        @Override
        public void onPageSelected(int position) {
            actionBar.setSelectedNavigationItem(position);
        }
    });

    // For each of the sections in the app, add a tab to the action bar.
    for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
        // Create a tab with text corresponding to the page title defined by
        // the adapter. Also specify this Activity object, which implements
        // the TabListener interface, as the callback (listener) for when
        // this tab is selected.
        actionBar.addTab(
                actionBar.newTab()
                        .setText(mSectionsPagerAdapter.getPageTitle(i))
                        .setTabListener(this));
    }
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.main, menu);
    return true;
}

@Override
public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    // When the given tab is selected, switch to the corresponding page in
    // the ViewPager.
    mViewPager.setCurrentItem(tab.getPosition());
}

@Override
public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
}

@Override
public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
}

/**
 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
 * one of the sections/tabs/pages.
 */
public class SectionsPagerAdapter extends FragmentPagerAdapter {

    public SectionsPagerAdapter(FragmentManager fm) {
        super(fm);
    }

    @Override
    public Fragment getItem(int position) {Fragment f = null;
    switch(position){
    case 0:
    {
    f = new DummySectionFragment();//YourFragment
    // set arguments here, if required
    Bundle args = new Bundle();
    f.setArguments(args);
    break;
    }
    case 1:
    {
        f = new Fragment2();//YourFragment
        // set arguments here, if required
        Bundle args = new Bundle();
        f.setArguments(args);
        break;
    }

    default:
      throw new IllegalArgumentException("not this many fragments: " + position);
    }


    return f;
    }
    @Override
    public int getCount() {
        // Show 3 total pages.
        return 3;
    }

    @Override
    public CharSequence getPageTitle(int position) {
        Locale l = Locale.getDefault();
        switch (position) {
            case 0:
                return getString(R.string.title_section1).toUpperCase(l);
            case 1:
                return getString(R.string.title_section2).toUpperCase(l);
            case 2:
                return getString(R.string.title_section3).toUpperCase(l);
        }
        return null;
    }
}

/**
 * A dummy fragment representing a section of the app, but that simply
 * displays dummy text.
 */
public static class DummySectionFragment extends Fragment {
    /**
     * The fragment argument representing the section number for this
     * fragment.
     */
    public static final String ARG_SECTION_NUMBER = "section_number";

    public DummySectionFragment() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_main_dummy, container, false);
        TextView dummyTextView = (TextView) rootView.findViewById(R.id.section_label);
        dummyTextView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));
        return rootView;
    }


}  public static class Fragment2 extends Fragment {
    /**
     * The fragment argument representing the section number for this
     * fragment.
     */
    public static final String ARG_SECTION_NUMBER = "section_number";

    public Fragment2() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment2, container, false);
        TextView dummyTextView = (TextView) rootView.findViewById(R.id.section_label);
        dummyTextView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));
        return rootView;
    }
}
}
</code></pre>

<p>And here is the Log Cat : ( screenshot : <a href="http://s8.postimg.org/welool4v9/Log_Cat.jpg" rel="nofollow">http://s8.postimg.org/welool4v9/Log_Cat.jpg</a> )</p>

<pre><code>08-27 07:00:34.246: W/Trace(1791): Unexpected value from nativeGetEnabledTags: 0
08-27 07:00:34.246: I/Choreographer(1791): Skipped 40 frames!  The application may be doing too much work on its main thread.
08-27 07:00:34.297: D/AndroidRuntime(1791): Shutting down VM
08-27 07:00:34.297: W/dalvikvm(1791): threadid=1: thread exiting with uncaught exception (group=0xb4cd0908)
08-27 07:00:34.327: E/AndroidRuntime(1791): FATAL EXCEPTION: main
08-27 07:00:34.327: E/AndroidRuntime(1791): java.lang.IllegalArgumentException: not this many fragments: 2
08-27 07:00:34.327: E/AndroidRuntime(1791):     at com.example.testarenou.MainActivity$SectionsPagerAdapter.getItem(MainActivity.java:129)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.support.v4.app.FragmentPagerAdapter.instantiateItem(FragmentPagerAdapter.java:97)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.support.v4.view.ViewPager.addNewItem(ViewPager.java:832)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.support.v4.view.ViewPager.populate(ViewPager.java:1048)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.support.v4.view.ViewPager.populate(ViewPager.java:914)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.support.v4.view.ViewPager$3.run(ViewPager.java:244)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.view.Choreographer$CallbackRecord.run(Choreographer.java:749)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.view.Choreographer.doCallbacks(Choreographer.java:562)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.view.Choreographer.doFrame(Choreographer.java:531)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:735)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.os.Handler.handleCallback(Handler.java:725)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.os.Handler.dispatchMessage(Handler.java:92)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.os.Looper.loop(Looper.java:137)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at android.app.ActivityThread.main(ActivityThread.java:5039)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at java.lang.reflect.Method.invokeNative(Native Method)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at java.lang.reflect.Method.invoke(Method.java:511)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:793)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:560)
08-27 07:00:34.327: E/AndroidRuntime(1791):     at dalvik.system.NativeStart.main(Native Method)
</code></pre>

<p>If needed to provide any aother kind of informations please let me know.</p>
