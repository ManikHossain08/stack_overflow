<p>So I have a fragment where I have a gridview a textView and a Button.
In the gridview I want to display the images from a folder located in the SD card.</p>

<p><strong>I added the permissions in the Manifest:</strong></p>

<pre><code><uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
</code></pre>

<p><strong>The layout of the fragment looks like this:</strong></p>

<pre><code><RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingLeft="5dp"
    android:paddingRight="5dp"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    >

    <GridView xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/photogridview"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnWidth="90dp"
        android:numColumns="auto_fit"
        android:verticalSpacing="10dp"
        android:horizontalSpacing="10dp"
        android:stretchMode="columnWidth"
        android:gravity="center">
    </GridView>

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="New capture"
        android:id="@+id/btncapture"
        android:layout_alignParentBottom="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentStart="true" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:text="Medium Text"
        android:id="@+id/tvCalea"
        android:layout_alignTop="@+id/btncapture"
        android:layout_toRightOf="@+id/btncapture"
        android:layout_toEndOf="@+id/btncapture" />
</RelativeLayout>
</code></pre>

<p><strong>The code of the fragment is:</strong></p>

<pre><code>  @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        String CaleaMea="";
        Bundle bundle = this.getArguments();
        if(bundle != null){
            CaleaMea = bundle.getString("patu", "");
        }

        View view = inflater.inflate(R.layout.photos_layout,container,false);
        GridView gridView = (GridView) view.findViewById(R.id.photogridview);
        gridView.setAdapter(new PhotoImageAdapter(view.getContext(),CaleaMea)); // uses the view to get the context instead of getActivity().
        Log.d("POZE frag:",CaleaMea);

        TextView tv = (TextView) view.findViewById(R.id.tvCalea);
        tv.setText(CaleaMea);

        Button btn = (Button) view.findViewById(R.id.btncapture);
        final String finalCaleaMea = CaleaMea;
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                File resultingFile = new File(finalCaleaMea.toString() + "/image.jpg");
                Uri uriSavedImage=Uri.fromFile(resultingFile);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uriSavedImage);

                startActivityForResult(cameraIntent, 1888);
            }
        });

        return view;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }
</code></pre>

<p><strong>And the adapter:</strong></p>

<pre><code>public class PhotoImageAdapter extends BaseAdapter {
        private Context mContext;
        private String mCalea;
        ArrayList<String> itemList = new ArrayList<String>();

        public PhotoImageAdapter(Context c) {
            mContext = c;
        }
        public PhotoImageAdapter(Context c, String calea) {
        mContext = c;
        mCalea = calea;
    }

        void add(String path) {
            itemList.add(path);
        }

        void clear() {
            itemList.clear();
        }

        void remove(int index){
            itemList.remove(index);
        }

        @Override
        public int getCount() {
            return itemList.size();
        }

        @Override
        public Object getItem(int position) {
            return itemList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ImageView imageView;
            if (convertView == null) { // if it's not recycled, initialize some
                // attributes
                imageView = new ImageView(mContext);
                imageView.setLayoutParams(new GridView.LayoutParams(220, 220));
                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
                imageView.setPadding(8, 8, 8, 8);
            } else {
                imageView = (ImageView) convertView;
            }

            Bitmap bm = decodeSampledBitmapFromUri(itemList.get(position), 220,
                    220);

            imageView.setImageBitmap(bm);
            return imageView;
        }

        public Bitmap decodeSampledBitmapFromUri(String path, int reqWidth,
                                                 int reqHeight) {
            Bitmap bm = null;
            // First decode with inJustDecodeBounds=true to check dimensions
            final BitmapFactory.Options options = new BitmapFactory.Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeFile(path, options);
            // Calculate inSampleSize
            options.inSampleSize = calculateInSampleSize(options, reqWidth,
                    reqHeight);
            // Decode bitmap with inSampleSize set
            options.inJustDecodeBounds = false;
            bm = BitmapFactory.decodeFile(path, options);
            return bm;
        }

        public int calculateInSampleSize(

                BitmapFactory.Options options, int reqWidth, int reqHeight) {
            // Raw height and width of image
            final int height = options.outHeight;
            final int width = options.outWidth;
            int inSampleSize = 1;

            if (height > reqHeight || width > reqWidth) {
                if (width > height) {
                    inSampleSize = Math.round((float) height
                            / (float) reqHeight);
                } else {
                    inSampleSize = Math.round((float) width / (float) reqWidth);
                }
            }
            return inSampleSize;
        }



AsyncTaskLoadFiles myAsyncTaskLoadFiles;
public class AsyncTaskLoadFiles extends AsyncTask<Void, String, Void> {
    File targetDirector;
    ImageAdapter myTaskAdapter;

    public AsyncTaskLoadFiles(ImageAdapter adapter) {
        myTaskAdapter = adapter;
    }

    @Override
    protected void onPreExecute() {
        String ExternalStorageDirectoryPath = Environment
                .getExternalStorageDirectory().getAbsolutePath();

        String targetPath = "";
        targetPath = mCalea;
        Toast.makeText(mContext,mCalea,Toast.LENGTH_SHORT).show();
        targetDirector = new File(targetPath);
        myTaskAdapter.clear();

        super.onPreExecute();
    }

    @Override
    protected Void doInBackground(Void... params) {

        File[] files = targetDirector.listFiles();
        for (File file : files) {
            publishProgress(file.getAbsolutePath());
            if (isCancelled()) break;
        }
        return null;
    }

    @Override
    protected void onProgressUpdate(String... values) {
        myTaskAdapter.add(values[0]);
        super.onProgressUpdate(values);
    }

    @Override
    protected void onPostExecute(Void result) {
        myTaskAdapter.notifyDataSetChanged();
        super.onPostExecute(result);
    }

}
}
</code></pre>

<p>So, the behaviour is: nothing gets displayed in the fragment, except the button and textview. So the GridView does not get populated with images...</p>

<p><strong>What am I doing wrong?</strong></p>

<p>Thank you</p>
