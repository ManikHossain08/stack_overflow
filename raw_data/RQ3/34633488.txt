<p>I have a custom layout called activity_login_user_entity.xml</p>

<pre><code><ListView
    android:id="@+id/activity_login_user_entity_users"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/white"
    android:clickable="true"
    android:divider="#FFECECEC"
    android:dividerHeight="1dp"
    android:focusable="true" />
</code></pre>

<p>And a XML adapter:</p>

<pre><code><ImageButton
    android:id="@+id/adapter_user_login"
    android:layout_width="wrap_content"
    android:layout_height="match_parent"
    android:background="@null"
    android:paddingLeft="15dp"
    android:paddingStart="15dp"
    android:src="@drawable/ic_login" />


<com.neopixl.pixlui.components.textview.TextView
    android:id="@+id/adapter_user_entity"
    style="@style/BoldFont"
    android:layout_width="0dp"
    android:layout_height="match_parent"
    android:layout_weight="1"
    android:gravity="start|center"
    android:padding="20dp"
    android:text="15/05/2015"
    android:textColor="@color/colorBaseApp"
    android:textSize="14sp" />
</code></pre>

<p>My Adapter Class:</p>

<pre><code>    public class UserAdapter extends BaseAdapter {

    private ArrayList<User> dataList;
    private final LayoutInflater mInflater;
    private final Context mainActivity;

    public UserAdapter(Context context, ArrayList<User> results) {
        super();
        this.dataList = results;
        this.mainActivity = context;
        this.mInflater = LayoutInflater.from(context);
    }

    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return dataList.size();
    }

    @Override
    public Object getItem(int arg0) {
        // TODO Auto-generated method stub
        return dataList.get(arg0);
    }

    @Override
    public long getItemId(int arg0) {
        // TODO Auto-generated method stub
        return arg0;
    }

    public View getView(int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub

        ViewHolder holder;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.adapter_user, null);
            holder = new ViewHolder();
            holder.entity = (TextView) convertView.findViewById(R.id.adapter_user_entity);

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        holder.entity.setText(dataList.get(position).getParticipantEntityName());

        return convertView;
    }

    static class ViewHolder {
        TextView entity;
    }

    @Override
    public boolean isEnabled(int position) {
        return true;
    }
}
</code></pre>

<p>And the Dialog:</p>

<pre><code>final Dialog new_dialog = new Dialog(LoginActivity.this);
        new_dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        new_dialog.setContentView(R.layout.activity_login_user_entity);
        new_dialog.setCancelable(false);

        ListView lv = (ListView) new_dialog.findViewById(R.id.activity_login_user_entity_users);

        UserAdapter cdaa = new UserAdapter(getApplicationContext(), users);

        lv.setAdapter(cdaa);

        new_dialog.show();

        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Toast.makeText(LoginActivity.this, "Item Selected: " + position, Toast.LENGTH_SHORT).show();
            }
        });
</code></pre>

<p>My problem is that everything is displayed just fine, the items are there the way I want them to be, but it's not possible to detect the listview's item clicked. Can somebody help me?</p>

<p>EDIT:</p>

<p>I manage to get it working with the following code:</p>

<pre><code>final ArrayAdapter<User> adapter = new ArrayAdapter<>(this, android.R.layout.select_dialog_item);
        adapter.addAll(users);
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setAdapter(adapter, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int item) {
                loginSuccess(adapter.getItem(item));
            }
        });

        AlertDialog alert = builder.create();
        alert.show();
</code></pre>

<p>However, I can't get a custom layout like I want.</p>
