<p>I need to get the information transfered from the NFC READER  to my phone to be Arrange in each line wth for eg.Event ID,Event Name,DateTime,Venue.</p>

<p>At the moment when I tap my phone to the reader using my android app,all i get is a string of text.I want to break the text to be able to identify Event Id,EventName,DateTime,Venue to be able to getText seperately for each text to submit to database.</p>

<p>here is my code</p>

<pre><code>package com.techblogon.loginexample;



import java.nio.charset.Charset;
import java.util.Arrays;

import com.techblogon.loginexample.R;

import android.app.Activity;
import android.content.Intent;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.NfcAdapter;
import android.nfc.NfcEvent;
import android.nfc.NfcAdapter.CreateNdefMessageCallback;
import android.nfc.NfcAdapter.OnNdefPushCompleteCallback;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Parcelable;
import android.provider.Settings;
import android.text.format.Time;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.TextView;
import android.widget.Toast;

public class UserScreen extends Activity implements CreateNdefMessageCallback, OnNdefPushCompleteCallback{

    private static final int MESSAGE_SENT = 1;
    NfcAdapter mNfcAdapter;
    TextView mInfoText;

    protected void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.userscreen);
        mInfoText = (TextView) findViewById(R.id.textView);
        // Check for available NFC Adapter
        mNfcAdapter = NfcAdapter.getDefaultAdapter(this);
        if (mNfcAdapter == null) {
            mInfoText = (TextView) findViewById(R.id.textView);
            mInfoText.setText("NFC is not available on this device.");
        }
        // Register callback to set NDEF message
        mNfcAdapter.setNdefPushMessageCallback(this, this);
        // Register callback to listen for message-sent success
        mNfcAdapter.setOnNdefPushCompleteCallback(this, this);
    } @Override
    public NdefMessage createNdefMessage(NfcEvent event) {
        Time time = new Time();
        time.setToNow();
        String text = ("Beam me up!\n\n" +
                "Beam Time: " + time.format("%H:%M:%S"));
        NdefMessage msg = new NdefMessage(
              new NdefRecord[] { createMimeRecord("application/com.example.android.beam", text.getBytes()) });
        return msg;
    }

    @Override
    public void onNdefPushComplete(NfcEvent arg0) {
        // A handler is needed to send messages to the activity when this
        // callback occurs, because it happens from a binder thread
        mHandler.obtainMessage(MESSAGE_SENT).sendToTarget();        
        Log.w ("Sent",mHandler.obtainMessage(MESSAGE_SENT).toString());
    }
    /** This handler receives a message from onNdefPushComplete */
    private final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            switch (msg.what) {
            case MESSAGE_SENT:
                Toast.makeText(getApplicationContext(), "Message sent!", Toast.LENGTH_LONG).show();
                break;
            }
        }
    };

    @Override
    public void onResume() {
        super.onResume();
        // Check to see that the Activity started due to an Android Beam
        if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
            processIntent(getIntent());
        }
    }

    @Override
    public void onNewIntent(Intent intent) {
        // onResume gets called after this to handle the intent
        setIntent(intent);
    }

    // Parses the NDEF Message from the intent and prints to the TextView

   void processIntent(Intent intent) {      
       Parcelable[] rawMsgs = intent.getParcelableArrayExtra(
               NfcAdapter.EXTRA_NDEF_MESSAGES);
       // only one message sent during the beam 
       NdefMessage msg = (NdefMessage) rawMsgs[0];
       // record 0 contains the MIME type, record 1 is the AAR, if present
       mInfoText.setText(new String(msg.getRecords()[0].getPayload())); 


   }


   public NdefRecord createMimeRecord(String mimeType, byte[] payload) {
       byte[] mimeBytes = mimeType.getBytes(Charset.forName("US-ASCII"));
       NdefRecord mimeRecord = new NdefRecord(
               NdefRecord.TNF_MIME_MEDIA, mimeBytes, new byte[0], payload);
       return mimeRecord;
   }

   @Override
   public boolean onCreateOptionsMenu(Menu menu) {
       // If NFC is not available, we won't be needing this menu
       if (mNfcAdapter == null) {
           return super.onCreateOptionsMenu(menu);
       }
       MenuInflater inflater = getMenuInflater();
       inflater.inflate(R.menu.main, menu);
       return true;
   }

   @Override
   public boolean onOptionsItemSelected(MenuItem item) {
       switch (item.getItemId()) {
           case R.id.menu_settings:
               Intent intent = new Intent(Settings.ACTION_NFCSHARING_SETTINGS);
               startActivity(intent);
               return true;
           default:
               return super.onOptionsItemSelected(item);
       }
   }
    }
</code></pre>
