<p>I want to display the items in the table using the "ListView" and I have a problem. 
error: column '_id' does not exist</p>

<p>Table name is TABKA.Table has two columns: TABKA_ID, TABKA_NAME
The program runs, but when he wants to show list, then there is an error</p>

<p>My code:</p>

<p><strong>DatabaseHelper.java</strong></p>

<pre><code>package com.example.sellcar;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;

public class DatabaseHelper extends SQLiteOpenHelper{

    //The Android's default system path of your application database.
    String DB_PATH =null;

    private static String DB_NAME = "dbSellCAR.s3db"; 
    private SQLiteDatabase myDataBase;     
    private final Context myContext;
    public static final String TABLE_NAME = "TABKA";
    public static final String COLUMN_ID = "TABKA_ID";
    public static final String COLUMN_TITLE = "TABKA_NAME";


    /**
     * Constructor
     * Takes and keeps a reference of the passed context in order to access to the application assets and resources.
     * @param context
     */
    public DatabaseHelper(Context context) {

        super(context, DB_NAME, null, 1);
        this.myContext = context;
        DB_PATH="/data/data/"+context.getPackageName()+"/"+"databases/";
    }    
  /**
     * Creates a empty database on the system and rewrites it with your own database.
     * */
    public void createDataBase() throws IOException{  
        boolean dbExist = checkDataBase();
        if(dbExist){
            //do nothing - database already exist
        }else{
            //By calling this method and empty database will be created into the default system path
               //of your application so we are gonna be able to overwrite that database with our database.
            this.getReadableDatabase(); 
            try {
                copyDataBase(); 
            } catch (IOException e) {  
                throw new Error("Error copying database"); 
            }
        } 
    }  
    /**
     * Check if the database already exist to avoid re-copying the file each time you open the application.
     * @return true if it exists, false if it doesn't
     */
    private boolean checkDataBase(){ 
        SQLiteDatabase checkDB = null;  
        try{
            String myPath = DB_PATH + DB_NAME;
            checkDB = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);
        }catch(SQLiteException e){  
            //database does't exist yet. 
        } 
        if(checkDB != null){ 
            checkDB.close();
        }
        return checkDB != null ? true : false;
    }

    /**
     * Copies your database from your local assets-folder to the just created empty database in the
     * system folder, from where it can be accessed and handled.
     * This is done by transfering bytestream.
     * */
    private void copyDataBase() throws IOException{

        //Open your local db as the input stream
        InputStream myInput = myContext.getAssets().open(DB_NAME);

        // Path to the just created empty db
        String outFileName = DB_PATH + DB_NAME;

        //Open the empty db as the output stream
        OutputStream myOutput = new FileOutputStream(outFileName);

        //transfer bytes from the inputfile to the outputfile
        byte[] buffer = new byte[1024];
        int length;
        while ((length = myInput.read(buffer))>0){
            myOutput.write(buffer, 0, length);
        }  
        //Close the streams
        myOutput.flush();
        myOutput.close();
        myInput.close();  
    } 
    public void openDataBase() throws SQLException{
        //Open the database
        String myPath = DB_PATH + DB_NAME;
        myDataBase = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);
    }

    @Override
    public synchronized void close() { 
            if(myDataBase != null)
                myDataBase.close();
            super.close();  
    }

    @Override
    public void onCreate(SQLiteDatabase db) { 
    }  

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {  
    }   
    public Cursor getCursor()
    {
        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
        queryBuilder.setTables(TABLE_NAME);
        String[] asColumnsToReturn = new String[] {COLUMN_ID,COLUMN_TITLE};
        Cursor mCursor = queryBuilder.query(myDataBase, asColumnsToReturn, null, null, null, null, null);
        return mCursor;
    }   
    //return name column
    public String getName(Cursor c){
        return c.getString(1);
    }   
    //return executeSQL
    public void dodaj(String sql){
        myDataBase.execSQL(sql);
    }
}
</code></pre>

<p><strong>ListOfOffers.java</strong></p>

<pre><code>package com.example.sellcar;

import java.io.IOException;

import android.app.Activity;
import android.content.Context;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CursorAdapter;
import android.widget.ListView;
import android.widget.TextView;

public class ListOfOffers extends Activity{

    private DatabaseHelper myDatabaseHelper = null;
    private Cursor myCursor = null;
    private myAdapter adapter=null;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
    try {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ListView myListView=(ListView) findViewById(R.id.myListView1);

        DatabaseHelper dbDatabaseHelper = new DatabaseHelper(this);

            dbDatabaseHelper.createDataBase();
            dbDatabaseHelper.openDataBase();
            myCursor=dbDatabaseHelper.getCursor();          
            startManagingCursor(myCursor);
            adapter=new myAdapter(myCursor);
            myListView.setAdapter(adapter);

    } catch (IOException e) {
            // TODO Auto-generated catch block
        Log.e("BŁAD !","To jest bład w kodzie: "+e.toString());
            e.printStackTrace();
        }       
    }

    class myAdapter extends CursorAdapter{

        myAdapter(Cursor c){
            super(ListOfOffers.this,c);
        }

        public void bindView(View row, Context ctxt,Cursor c) {
            myHolder holder=(myHolder)row.getTag();
            holder.populateFrom(c, myDatabaseHelper);
        }
        @Override
        public View newView(Context ctxt, Cursor c,ViewGroup parent){
            LayoutInflater inflater=getLayoutInflater();
            View row=inflater.inflate(R.layout.row_offer,parent,false);
            myHolder holder=new myHolder(row);
            row.setTag(holder);
            return(row);
        }
    }


    static class myHolder {
        private TextView tvNazwa=null;      
        myHolder(View row) {
            tvNazwa=(TextView)row.findViewById(R.id.tvRowOffer);
        }

        void populateFrom(Cursor c,DatabaseHelper dbDH){
            tvNazwa.setText(dbDH.getName(c));
        }
    }   

}
</code></pre>
