<p>Setup:</p>

<p>I have An activity with two fragments that are dynamically placed inside a framelayout. One of the fragments is a map fragment with the following onDestroyView  implementations.</p>

<pre><code>@Override
public void onDestroyView() {
    super.onDestroyView();
    try{
        MapFragment fragment = (MapFragment)getFragmentManager().findFragmentById(R.id.map);
        FragmentTransaction ft = getActivity().getFragmentManager().beginTransaction();
        ft.remove(fragment);
        ft.commit();
    }catch(Exception e){
        Log.e("SomeTag", "someError");
    }
}
</code></pre>

<p>Furthermore, my Activity implements the onOptionsItemSelected and calls finish() when the user presses the home button in the ActionBar. </p>

<p><strong>Layout:</strong></p>

<pre><code><?xml version="1.0" encoding="utf-8"?>
<android.support.v4.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="MyActivity"
    android:padding="0dp"
    android:layout_margin="0dp">
    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/fragment_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</android.support.v4.widget.DrawerLayout>
</code></pre>

<p><strong>Adding fragment in Activity:</strong></p>

<pre><code>private void addFragmentToView(Fragment fragment){
    FragmentTransaction transaction = getFragmentManager().beginTransaction();
    // Replace whatever is in the fragment_container view with this fragment,
    // and add the transaction to the back stack so the user can navigate back
    transaction.replace(R.id.fragment_container, fragment);
    transaction.addToBackStack(null);
    // Commit the transaction
    transaction.commit();
}
</code></pre>

<p><strong>Activity's onOptionsItemSelected:</strong></p>

<pre><code>@Override
public boolean onOptionsItemSelected(MenuItem item)
{
    switch (item.getItemId())
    {
        case android.R.id.home:
            finish();
            overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);
            return true;
        default:
            return super.onOptionsItemSelected(item);
    }
}
</code></pre>

<p><strong>The problem:</strong>
When I am in the map fragment, and I click on the ActionBar's back button, the activity receives the click and calls finish(). Then the map fragment's onDestroyView kicks in and tries to destroy the fragment. However, what happens is that the app switches to the activity before this one and then just quits the app altogether(since my previous activity is the first activity).</p>

<p>This behavior is not seen when I am in my other fragment and perform the exact same action, but that fragment does not remove itself in onDestroyView.</p>

<p>Question:
<strong>What would be a good way to handle the situation and to allow the map fragment to destroy itself but also to return to the previous activity?</strong></p>
