<p>My android application captures image and stores it in external memory in application folder which I have created, but when I run the application on phones with external storage not removable. I mean with phones having no SD card the app captures the image and then force closes. The image cannot be written to external storage with phones without SD card.</p>

<p>This is my main activity</p>

<pre><code>package com.kamp.linguist;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.kamp.linguist.util.SystemUiHider;
import com.memetix.mst.language.Language;
import com.memetix.mst.translate.Translate;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 * 
 * @see SystemUiHider
 */
@SuppressLint("NewApi")
public class FullscreenActivity extends Activity {
    /**
     * Whether or not the system UI should be auto-hidden after
     * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
     */

      private AutoFocusManager autoFocusManager;
      private tesseract tesseract;
      private static final boolean AUTO_HIDE = true;
      public static final String lang = "eng";
      public static String langsrc;
      public static String binglangsrc;
      public static String langtar;
      public static String srcprefkey="srckey";
      public static String tarprefkey="tarkey";
      public static String langflag=null;
      //private static final String TAG = "SimpleAndroidOCR.java";

      private static String DATA_PATH="";

      private static final String TAG = "CameraActivity";
      private final Context context=null;
      private Camera camera = null;
      public static final String MYPREFS="mysharedprefrences";
      /**
     * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
     * user interaction before hiding the system UI.
     */
    private static final int AUTO_HIDE_DELAY_MILLIS = 3000;

    /**
     * If set, will toggle the system UI visibility upon interaction. Otherwise,
     * will show the system UI visibility upon interaction.
     */
    private static final boolean TOGGLE_ON_CLICK = true;

    /**
     * The flags to pass to {@link SystemUiHider#getInstance}.
     */
    private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;

    /**
     * The instance of the {@link SystemUiHider} for this activity.
     */
    private SystemUiHider mSystemUiHider;
    Button srclang ;
    Button targetlang ;
    String recognizedTexttrans="";
    String recognizedText="";


        SharedPreferences mysp; 
        SharedPreferences.Editor editor;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

         autoFocusManager = new AutoFocusManager(context, camera);
         mysp= getSharedPreferences(MYPREFS,Activity.MODE_PRIVATE); 
         editor=mysp.edit();
    /*if(Environment.isExternalStorageRemovable())
        {
            EXT_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/";
              DATA_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/"+langsrc+"/";
               IMAGE = EXT_PATH+"capture.jpg";
        }else{
            EXT_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/";
              DATA_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/"+langsrc+"/";
               IMAGE = EXT_PATH+"capture.jpg";
        }*/


    /*String[] paths = new String[] { DATA_PATH, DATA_PATH + "tessdata/" };
        for (String path : paths) {
            File dir = new File(path);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    Log.v(TAG, "ERROR: Creation of directory " + path + " on sdcard failed");
                    return;
                } else {
                    Log.v(TAG, "Created directory " + path + " on sdcard");
                }
            }

        }*/


        setContentView(R.layout.activity_fullscreen);

        final View controlsView = findViewById(R.id.fullscreen_content_controls);
        final View contentView = findViewById(R.id.fullscreen_content);

        // Set up an instance of SystemUiHider to control the system UI for
        // this activity.
        mSystemUiHider = SystemUiHider.getInstance(this, contentView,
                HIDER_FLAGS);
        mSystemUiHider.setup();
        mSystemUiHider
                .setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
                    // Cached values.
                    int mControlsHeight;
                    int mShortAnimTime;

                    @Override
                    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
                    public void onVisibilityChange(boolean visible) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
                            // If the ViewPropertyAnimator API is available
                            // (Honeycomb MR2 and later), use it to animate the
                            // in-layout UI controls at the bottom of the
                            // screen.
                            if (mControlsHeight == 0) {
                                mControlsHeight = controlsView.getHeight();
                            }
                            if (mShortAnimTime == 0) {
                                mShortAnimTime = getResources().getInteger(
                                        android.R.integer.config_shortAnimTime);
                            }
                            controlsView
                                    .animate()
                                    .translationY(visible ? 0 : mControlsHeight)
                                    .setDuration(mShortAnimTime);
                        } else {
                            // If the ViewPropertyAnimator APIs aren't
                            // available, simply show or hide the in-layout UI
                            // controls.
                            controlsView.setVisibility(visible ? View.VISIBLE
                                    : View.GONE);
                        }

                        if (visible && AUTO_HIDE) {
                            // Schedule a hide().
                            delayedHide(AUTO_HIDE_DELAY_MILLIS);
                        }
                    }
                });

        // Set up the user interaction to manually show or hide the system UI.
        contentView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (TOGGLE_ON_CLICK) {
                    //autoFocusManager.start();
                    mSystemUiHider.toggle();
                } else {
                    //autoFocusManager.start();

                    mSystemUiHider.show();
                }
            }
        });
    final View forfocus = findViewById(R.id.forauto);
        forfocus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                 Toast.makeText(FullscreenActivity.this,"Source lang: " + langsrc + "\nTarget lang:" + langtar,Toast.LENGTH_SHORT).show();

                autoFocusManager.start();
            }
        });

            // Upon interacting with UI controls, delay any scheduled hide()
        // operations to prevent the jarring behavior of controls going away
        // while interacting with the UI.
        findViewById(R.id.targetlang).setOnTouchListener(
                mDelayHideTouchListener);

          final CameraSurfaceView cameraView =
                    new CameraSurfaceView(getApplicationContext());
                final FrameLayout frame = (FrameLayout)findViewById(R.id.cam);    
                frame.addView(cameraView);

                Button capture = (Button) findViewById(R.id.button);
                capture.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        //autoFocusManager.start();
                         cameraView.capture(new Camera.PictureCallback() {
                                public void onPictureTaken(byte[] data, Camera camera) {
                                  // Save the image JPEG data to the SD card
                                     File dir = new File(Environment.getExternalStorageDirectory().toString()+"/Linguist");
                                     dir.mkdir();
                                        try {
                                              File file =new File(Environment.getExternalStorageDirectory().toString()+"/Linguist", "capture.jpg") ;
                                              file.mkdir();
                                              if(!file.exists()){
                                                  try {
                                                    file.createNewFile();

                                                  } catch (IOException e) {

                                                      e.printStackTrace();
                                                  }
                                              }else{
                                                  file.delete();
                                                  try {
                                                      file.createNewFile();
                                                  } catch (IOException e) {

                                                      e.printStackTrace();
                                                  }
                                              }
                                              if(file.canWrite()){
                                                  Toast.makeText(FullscreenActivity.this,"writeable",Toast.LENGTH_SHORT).show();  
                                              }else{
                                                  Toast.makeText(FullscreenActivity.this,"access denined!!!!",Toast.LENGTH_SHORT).show(); 
                                              }

                                              FileOutputStream fos=new FileOutputStream(file);
                                              fos.write(data);

                                              fos.close();
                                             Toast.makeText(FullscreenActivity.this,"Successfully created",Toast.LENGTH_SHORT).show(); 
                                            } catch (FileNotFoundException e) {
                                              Log.e(TAG, "File Note Found", e);
                                            } catch (IOException e) {
                                              Log.e(TAG, "IO Exception", e);
                                            }

                                    // tess();
                                }
                         });

                    }
                });

                Button tee = (Button) findViewById(R.id.button1);
                tee.setOnClickListener(new View.OnClickListener(){
                     public void onClick(View v) {

                        tess();
                        //trans();
                     }
                });


                Button swap = (Button) findViewById(R.id.Button01);
                swap.setOnClickListener(new View.OnClickListener(){
                     public void onClick(View v) {

                         String tempsrclang,templangshow = null;
                            tempsrclang=langtar;
                             if(langsrc.equals("eng")){
                                 langtar="en";
                                 templangshow="English";
                               }else if(langsrc.equals("hin")){
                                   langtar="hi";
                                   templangshow="Hindi";
                               }else if(langsrc.equals("spa")){
                                   langtar="es";
                                   templangshow="Spanish";
                               }else if(langsrc.equals("chi_tra")){
                                   langtar="zh-CHT";
                                   templangshow="Chinese";
                               } else if(langsrc.equals("fra")){
                                 langtar="fr";
                                templangshow="French";
                               } 
                             targetlang.setText(templangshow);
                                editor.putString(tarprefkey,templangshow);



                             if(tempsrclang.equals("en")){
                               langsrc="eng";
                             templangshow="English";
                           }else if(tempsrclang.equals("hi")){
                             langsrc="hin";
                            templangshow="Hindi";
                           }else if(tempsrclang.equals("es")){
                             langsrc="spa";
                            templangshow="Spanish";
                           } else if(tempsrclang.equals("zh-CHT")){
                             langsrc="chi_tra";
                            templangshow="Chinese";
                           } else if(tempsrclang.equals("fr")){
                             langsrc="fra";
                            templangshow="French";
                           }
                             srclang.setText(templangshow);
                            editor.putString(srcprefkey,templangshow);
                             createdir();
                                editor.commit();

                     }

                });



                srclang = (Button) findViewById(R.id.srclang);
                srclang.setText(langsrc);
                 registerForContextMenu(srclang);
                srclang.setOnClickListener(new View.OnClickListener(){
                     public void onClick(View v) {

                         openContextMenu(v);


                     }


                });


                targetlang = (Button) findViewById(R.id.targetlang);
                targetlang.setText(langtar);
                registerForContextMenu(targetlang);
                targetlang.setOnClickListener(new View.OnClickListener(){
                     public void onClick(View v) {

                         openContextMenu(v);


                     }


                });

                 restore(); 
                 createdir();

            }   


     private void createdir() {
         //Boolean stor =Environment.isExternalStorageEmulated();
         if(Environment.isExternalStorageRemovable())//stor==true)
            {
             DATA_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/"+langsrc+"/";
             String[] paths = new String[] { DATA_PATH, DATA_PATH + "tessdata/" };
                for (String path : paths) {
                    File dir = new File(path);
                    if (!dir.exists()) {
                        if (!dir.mkdirs()) {
                            Log.v(TAG, "ERROR: Creation of directory " + path + " on sdcard failed");
                            return;
                        } else {
                            Log.v(TAG, "Created directory " + path + " on sdcard");
                        }
                    }

                }


            }else{

                DATA_PATH= Environment.getExternalStorageDirectory().toString()+"/Linguist/"+langsrc+"/";
                 String[] paths = new String[] { DATA_PATH, DATA_PATH + "tessdata/" };
                    for (String path : paths) {
                        File dir = new File(path);
                        if (!dir.exists()) {
                            if (!dir.mkdirs()) {
                                Log.v(TAG, "ERROR: Creation of directory " + path + " on sdcard failed");
                                return;
                            } else {
                                Log.v(TAG, "Created directory " + path + " on sdcard");
                            }
                        }

                    }


            }

    }


    @Override  
        public void onCreateContextMenu(ContextMenu menu, View v,  
                  ContextMenuInfo menuInfo) {  

             super.onCreateContextMenu(menu, v, menuInfo); 

             MenuInflater m = getMenuInflater();  
            if(v.getId()==R.id.srclang){
                langflag="source";
                m.inflate(R.menu.sourcelang, menu); 
            }
             else if(v.getId()==R.id.targetlang){
                 langflag="target";
             m.inflate(R.menu.targetlang, menu);
             }  
        }  
         @Override  
        public boolean onContextItemSelected(MenuItem item) { 

             String strlong =item.getTitle().toString();

           String strshort = null;


            if(langflag=="source"){

                 if(strlong.equals("English")){
                   strshort="eng";
               }else if(strlong.equals("Hindi")){
                   strshort="hin";
               }else if(strlong.equals("Spanish")){
                   strshort="spa";
               } else if(strlong.equals("Chinese")){
                   strshort="chi_tra";
               } else if(strlong.equals("French")){
                   strshort="fra";
               }
                        srclang.setText(item.getTitle());
                        editor.putString(srcprefkey, strlong);
                        langsrc=strshort;
                        createdir();
                       Toast.makeText(FullscreenActivity.this,"Selected Source Language:"+strlong,Toast.LENGTH_SHORT).show();
            }else if(langflag=="target"){

                 if(strlong.equals("English")){
                       strshort="en";
                   }else if(strlong.equals("Hindi")){
                       strshort="hi";
                   }else if(strlong.equals("Spanish")){
                       strshort="es";
                   }else if(strlong.equals("Chinese")){
                       strshort="zh-CHT";
                   }else if(strlong.equals("French")){
                       strshort="fr";
                   }   

                    targetlang.setText(item.getTitle());
                    editor.putString(tarprefkey, strlong);
                     langtar=strshort;
                     Toast.makeText(FullscreenActivity.this,"Selected Target Language:"+strlong,Toast.LENGTH_SHORT).show();
                }
            editor.commit();
            //store(str);

             return super.onContextItemSelected(item);  
        }





  private void tess(){
      tesseract=new tesseract();
      recognizedText=tesseract.tess(langsrc);
      if(recognizedText.equals(null)){
          Toast.makeText(FullscreenActivity.this,"OCR Failed",Toast.LENGTH_SHORT).show();
      }
         trans();

}




    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        delayedHide(100);
    }

    /**
     * Touch listener to use for in-layout UI controls to delay hiding the
     * system UI. This is to prevent the jarring behavior of controls going away
     * while interacting with activity UI.
     */
    View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {

            if (AUTO_HIDE) {
                delayedHide(AUTO_HIDE_DELAY_MILLIS);
            }
            return false;
        }
    };

    Handler mHideHandler = new Handler();
    Runnable mHideRunnable = new Runnable() {
        @Override
        public void run() {
            mSystemUiHider.hide();
        }
    };

    /**
     * Schedules a call to hide() in [delay] milliseconds, canceling any
     * previously scheduled calls.
     */
    private void delayedHide(int delayMillis) {
        mHideHandler.removeCallbacks(mHideRunnable);
        mHideHandler.postDelayed(mHideRunnable, delayMillis);
    }

     public void restore()
      {

            int mode=Activity.MODE_PRIVATE;
            SharedPreferences mysp= getSharedPreferences(MYPREFS, mode);    

            if(mysp.contains(srcprefkey)){
            langsrc=mysp.getString(srcprefkey,"");
            }
            else{
                langsrc="English";
            }
            if(mysp.contains(tarprefkey)){
                langtar=mysp.getString(tarprefkey,"");
                }
                else{
                    langtar="Hindi";
                }

            srclang.setText(langsrc);
            targetlang.setText(langtar);


            convertsrclang(langsrc);
        converttargetlang(langtar);


      }


     private void convertsrclang(String langsrc2) {
         if(langsrc2.equals("English")){
             langsrc="eng";
           }else if(langsrc2.equals("Hindi")){
               langsrc="hin";
           }else if(langsrc2.equals("Spanish")){
               langsrc="spa";
           }else if(langsrc2.equals("Chinese")){
               langsrc="chi_tra";
           }else if(langsrc2.equals("French")){
               langsrc="fra";
           }  

    }


    private void converttargetlang(String langtar2) {
         if(langtar2.equals("English")){
             langtar="en";
           }else if(langtar2.equals("Hindi")){
               langtar="hi";
           }else if(langtar2.equals("Spanish")){
               langtar="es";
           }else if(langtar2.equals("Chinese")){
               langtar="zh-CHT";
           }else if(langtar2.equals("French")){
               langtar="fr";
           }  

    }



     private void trans() {


             new MyAsyncTask() { 
                 protected void onPostExecute(Boolean result) {
                    ((TextView) findViewById(R.id.textView1)).setText( "RecoText: "+ recognizedText+"\n TransText:"+recognizedTexttrans);

                 }
             }.execute();
        } 
         class MyAsyncTask extends AsyncTask<Void, Integer, Boolean> {
                @Override

                protected Boolean doInBackground(Void... arg0) {
                    convertbingsrclang();
                    Translate.setClientId("MicrosoftTranslatorJavaAPI");
                    Translate.setClientSecret("0VHbhXQnJrZ7OwVqcoX/PDZlyLJS9co3cVev1TPr8iM=");
                    try {
                        recognizedTexttrans = Translate.execute(recognizedText,Language.fromString(binglangsrc), Language.fromString(langtar));
                    } catch(Exception e) {
                        recognizedTexttrans = e.toString();
                    }
                    return true;
                }


            }
         private void convertbingsrclang() {
             if(langsrc.equals("eng")){
                 binglangsrc="en";
               }else if(langsrc.equals("hin")){
                   binglangsrc="hi";
               }else if(langsrc.equals("spa")){
                   binglangsrc="es";
               }else if(langsrc.equals("chi_tra")){
                   binglangsrc="zh-CHT";
               } else if(langsrc.equals("fra")){
                   binglangsrc="fr";
               } 

            }
  }
</code></pre>
