<p>Consider the following tree:</p>

<p><img src="http://i.stack.imgur.com/v3wDY.jpg" alt="Tree"></p>

<p>What i am trying to do is emulate a Tree Wave Algorithm, so that if a node has received a token from all but one of its directly connected neighbours, it sends a token to that silent neighbour (always true for a leaf node). And if a node receives a token from the silent neighbour a decision is made. The nodes are always 7, and tree structure the same so i always know each node's neighbours (directly connected nodes).</p>

<p>The tree algorithm pseudo-code:</p>

<p><img src="http://i.stack.imgur.com/yYSGd.jpg" alt="The tree algorithm"></p>

<p>I have the following object:</p>

<pre><code>public final class Node implements Runnable {

    private final int name;

    // Indicating token receiving from neighbours
    private Map<Node, Boolean> neigh = new 
            HashMap<Node, Boolean>();

    public Node(int name) {
        this.name = name;
    }

    public int getName() {
        return name;
    }

    public void addNeigh(Node node) {
        neigh.put(node, false);
    }

    private int flag() {
        Collection<Boolean> c = neigh.values();
        int count = 0;
        for (Boolean bool : c) {
            if (!bool) {
                count++;
            }
        }
        return count;
    }

    private Node getSilentNeigh() {
        for (Entry<Node, Boolean> entry : neigh.entrySet()) {
            if (false == entry.getValue()) {
                return entry.getKey();
            }
        }
        return null;
    }

    public void sendToken(Node from, String token) {

        Node n;
        if ((n = getSilentNeigh()) != null && flag() == 1) {
            if (from.equals(n)) {
                System.out.println(name + " decides!");
            }
        }

        neigh.put(from, true);
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Node)) {
            return false;
        }

        final Node n = (Node) obj;
        return name == n.name;
    }

    @Override
    public int hashCode() {
        int hc = 17;
        return 37 * hc + name;
    }

    @Override
    public void run() {
        while(flag() > 1);

        Node n = getSilentNeigh();

        System.out.println(name + " sends token to " + n.getName());

        n.sendToken(this, "token");
    }

    @Override
    public String toString() {
        return "Node " + name;
    }
}
</code></pre>

<p>Inside the run() method there is a while(condition) that actually means.. wait (receiving tokens from neighbours), and when there is only one neighbour that the node did not receive token send token to him.</p>

<p>This is how i create the nodes and how i associate each other:</p>

<pre><code>        // Number of nodes
        int numberOfNodes = 7;

        // Array of nodes
        Node[] nodes = new Node[numberOfNodes]; 

        for (int i = 0; i < nodes.length; i++) {
            // Creating node
            nodes[i] = new Node(i);
        }

        nodes[0].addNeigh(nodes[1]);
        nodes[0].addNeigh(nodes[2]);
        nodes[1].addNeigh(nodes[0]);
        nodes[1].addNeigh(nodes[3]);
        nodes[1].addNeigh(nodes[4]);
        nodes[2].addNeigh(nodes[0]);
        nodes[2].addNeigh(nodes[5]);
        nodes[2].addNeigh(nodes[6]);    
        nodes[3].addNeigh(nodes[1]);
        nodes[4].addNeigh(nodes[1]);
        nodes[5].addNeigh(nodes[2]);
        nodes[6].addNeigh(nodes[2]);
</code></pre>

<p>What i do is randomly select the order of the nodes to execute:</p>

<pre><code>        // List holding random node numbers
        List numbers = new ArrayList<Integer>();

        int chosen = 0;
        while (chosen < numberOfNodes) {
            int processNum = randInt(0, (numberOfNodes - 1));
            if (!numbers.contains(Integer.valueOf(processNum))) {
                 numbers.add(new Integer(processNum));
                 chosen++;
            }
        }
</code></pre>

<p>So for example the nodes may be in any order:</p>

<pre><code>0, 5, 3, 4, 6, 2, 1
5, 3, 0, 2, 1, 6, 4
3, 1, 0, 2, 4, 6, 5
</code></pre>

<p>and then i start the threads:</p>

<pre><code>for (Integer number : numbers) {
    Thread thread = new Thread(nodes[number]);
    thread.start();
}
</code></pre>

<p>Sometimes i get the expected result (2 must decide):</p>

<pre><code>Nodes selected: 0, 4, 5, 2, 6, 3, 1
5 sends token to 2
4 sends token to 1
6 sends token to 2
3 sends token to 1
1 sends token to 0
0 sends token to 2
2 decides!
2 sends token to 0
0 decides!
</code></pre>

<p>But usually i get an error and only one decides:</p>

<pre><code>Nodes selected: 5, 3, 4, 6, 0, 2, 1
3 sends token to 1
5 sends token to 2
4 sends token to 1
6 sends token to 2
2 sends token to 0
0 sends token to 1
1 decides!
Exception in thread "Thread-6" java.lang.NullPointerException
    at uk.ac.ncl.csc8103.wave.Node.run(Node.java:86)
    at java.lang.Thread.run(Thread.java:745)
</code></pre>

<p>And yes this is for an Assignment, and i am really close to this guys.. but i am facing this prob.</p>
