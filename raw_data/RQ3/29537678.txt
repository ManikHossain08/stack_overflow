<p>I'm using gridview to load images locally and using Universal image loader, but I have one problem and there is no solution benefited me, that even though there is no repeated drawable on my images and they are unique at all, the image loader duplicate some images.</p>

<pre><code>import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;

public class customizedGrid extends BaseAdapter {
    private Context mContext;
    private final Integer[] Imageid;
    ImageLoader imageLoader = ImageLoader.getInstance();;
    DisplayImageOptions options;
    LayoutInflater inflater;

    public customizedGrid(Context c, Integer[] mImageIds) {
        mContext = c;
        options = new DisplayImageOptions.Builder()
                .showStubImage(R.drawable.images).resetViewBeforeLoading(true)
                .cacheInMemory().cacheOnDisc()
                .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
                .delayBeforeLoading(1000)
                .displayer(new SimpleBitmapDisplayer()).build();
        imageLoader.init(ImageLoaderConfiguration.createDefault(mContext));
        this.Imageid = mImageIds;
        inflater = (LayoutInflater) mContext
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

    }

    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return Imageid.length;
    }

    @Override
    public Integer getItem(int position) {
        // TODO Auto-generated method stub
        return Imageid[position];
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub
        ImageView imageView;

        if (convertView == null) {

            imageView = new ImageView(mContext);
            imageView.setLayoutParams(new GridView.LayoutParams(125, 125));
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setPadding(0, 0, 0, 0);
        } else {
            imageView = (ImageView) convertView;
        }
        imageView.setScaleType(ScaleType.FIT_XY);
        imageLoader.displayImage("drawable://" + Imageid[position], imageView,
                options);
        // imageView.setImageResource(Imageid[position]);
        return imageView;
    }

}
</code></pre>

<p>And I tried to use Image Holder but the performance issue is exist</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {
    // TODO Auto-generated method stub
    View grid;

    if (convertView == null) {
        LayoutInflater inflater = (LayoutInflater) mContext
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        grid = inflater.inflate(R.layout.unit, parent, false);
        ViewHolder viewHolder = new ViewHolder();
        viewHolder.image = (ImageView) grid.findViewById(R.id.grid_image);
        grid.setTag(viewHolder);
    } else {
        grid = (View) convertView;
    }
    ViewHolder holder = (ViewHolder) grid.getTag();
    holder.image.setImageResource(Imageid[position]);
    return grid;
    /*
     * imageLoader.displayImage("drawable://" //
     * +Imageid[Integer.parseInt(imageView
     * .getTag().toString())],imageView,options);
     * imageView.setImageResource(
     * Imageid[Integer.parseInt(imageView.getTag() .toString())]);
     */

}

static class ViewHolder {
    public ImageView image;
}
</code></pre>
