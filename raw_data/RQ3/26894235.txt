<p>I'm using a sqlite database for first time, and I have a problem to insert data.</p>

<p>I created database with DB Browser, I added 3 rows, and it work fine to read data. </p>

<p>I use this to select all rows</p>

<pre><code>public ArrayList<Vaca> selectAllVacas() {
    ArrayList<Vaca> list = new ArrayList<Vaca>();
    Cursor cursor = this.db.query(VACAS_TABLE_NAME, 
        null, null, null, null, null, Vacas.NOMBRE+" ASC");
    if (cursor.moveToFirst()) {
         do {
             Vaca vaca = new Vaca(cursor.getLong(0), cursor.getString(1),
                  cursor.getString(2), cursor.getString(3), 
                  cursor.getInt(4), cursor.getInt(5), cursor.getInt(6));

            list.add(vaca);
         } while (cursor.moveToNext());
      }
      if (cursor != null && !cursor.isClosed()) {
     cursor.close();
  }
  return list;
</code></pre>

<p>}</p>

<p>And I use this to insert into the table </p>

<pre><code>public long insertVaca(Vaca vaca) {
  ContentValues values = new ContentValues();
  values.put(Vacas.NOMBRE, vaca.getNombre());
  values.put(Vacas.NUMERO_CORTO, vaca.getNumero_corto());
  values.put(Vacas.NUMERO_COMPLETO, vaca.getNumero_completo());
  values.put(Vacas.FECHA_NACIMIENTO, vaca.getFecha_nacimiento());
  values.put(Vacas.PADRE, vaca.getPadre());
  values.put(Vacas.MADRE, vaca.getMadre());
  db = this.getWritableDatabase();
  long id = db.insert(VACAS_TABLE_NAME, null, values);
  return id;
</code></pre>

<p>}</p>

<p>Select work fine, and I get the data, but when I use the insert, I get this error </p>

<pre><code> android.database.sqlite.SQLiteException: no such table: vacas (code 1): , while compiling: SELECT * FROM vacas WHERE numero_completo=?
</code></pre>

<p>I think that is a problem with my DBHelper class, because if table exist to select, also exist for insert. </p>

<p>My entire DBHelper class are this </p>

<pre><code>public class DBHelper extends SQLiteOpenHelper{

//Ruta por defecto de las bases de datos en el sistema Android


private static String DB_NAME = "vacas.db";

private static final String VACAS_TABLE_NAME = "vacas";

private SQLiteDatabase db;

private final Context myContext;

private String DB_PATH;

public static final class Vacas implements BaseColumns {
    private Vacas() {}
    public static final String NOMBRE = "nombre";
    public static final String NUMERO_CORTO = "numero_corto";
    public static final String NUMERO_COMPLETO = "numero_completo";
    public static final String FECHA_NACIMIENTO = "fecha_nacimiento";
    public static final String PADRE = "padre";
    public static final String MADRE = "madre";
}

public static final class Toros implements BaseColumns {
    private Toros() {}
    public static final String NOMBRE = "nombre";
}

public DBHelper(Context context) {
    super(context, DB_NAME, null, 1);
    this.myContext = context;
    ContextWrapper cw = new ContextWrapper(myContext);
    DB_PATH = cw.getFilesDir().getAbsolutePath()+ "/databases/";        
}

public void createDataBase() throws IOException{

    boolean dbExist = checkDataBase();
    if(dbExist){
    //la base de datos existe y no hacemos nada.
    }else{
    this.getReadableDatabase();

    try {
    copyDataBase();

    } catch (IOException e) {
    throw new Error("Error copiando Base de Datos");
    }
    }
}

private boolean checkDataBase(){

    SQLiteDatabase checkDB = null;

    try{

    String myPath = DB_PATH + DB_NAME;
    checkDB = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);

    }catch(SQLiteException e){

    //si llegamos aqui es porque la base de datos no existe todavía.

    }
    if(checkDB != null){

    checkDB.close();

    }
    return checkDB != null ? true : false;
}

/**
* Copia nuestra base de datos desde la carpeta assets a la recién creada
* base de datos en la carpeta de sistema, desde dónde podremos acceder a ella.
* Esto se hace con bytestream.
* */
private void copyDataBase() throws IOException{

    File folder = new File(DB_PATH);
    boolean success = true;
    if (!folder.exists()) {
        success = folder.mkdir();
    }

    //Abrimos el fichero de base de datos como entrada
    InputStream myInput = myContext.getAssets().open(DB_NAME);

    //Ruta a la base de datos vacía recién creada
    String outFileName = DB_PATH + DB_NAME;

    //Abrimos la base de datos vacía como salida
    OutputStream myOutput = new FileOutputStream(outFileName);

    //Transferimos los bytes desde el fichero de entrada al de salida
    byte[] buffer = new byte[1024];
    int length;
    while ((length = myInput.read(buffer))>0){
        myOutput.write(buffer, 0, length);
    }

    //Liberamos los streams
    myOutput.flush();
    myOutput.close();
    myInput.close();

}

public void open() throws SQLException{

    //Abre la base de datos
    try {
    createDataBase();
    } catch (IOException e) {
    throw new Error("Ha sido imposible crear la Base de Datos");
    }

    String myPath = DB_PATH + DB_NAME;
    db = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);

}

@Override
public synchronized void close() {
    if(db != null)
    db.close();
    super.close();
}

@Override
public void onCreate(SQLiteDatabase db) {
    try {
        createDataBase();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

}

public ArrayList<Vaca> selectAllVacas() {
    ArrayList<Vaca> list = new ArrayList<Vaca>();
    Cursor cursor = this.db.query(VACAS_TABLE_NAME, 
        null, null, null, null, null, Vacas.NOMBRE+" ASC");
    if (cursor.moveToFirst()) {
         do {
             Vaca vaca = new Vaca(cursor.getLong(0), cursor.getString(1),
                  cursor.getString(2), cursor.getString(3), 
                  cursor.getInt(4), cursor.getInt(5), cursor.getInt(6));

            list.add(vaca);
         } while (cursor.moveToNext());
      }
      if (cursor != null && !cursor.isClosed()) {
     cursor.close();
  }
  return list;
}

public long insertVaca(Vaca vaca) {
  ContentValues values = new ContentValues();
  values.put(Vacas.NOMBRE, vaca.getNombre());
  values.put(Vacas.NUMERO_CORTO, vaca.getNumero_corto());
  values.put(Vacas.NUMERO_COMPLETO, vaca.getNumero_completo());
  values.put(Vacas.FECHA_NACIMIENTO, vaca.getFecha_nacimiento());
  values.put(Vacas.PADRE, vaca.getPadre());
  values.put(Vacas.MADRE, vaca.getMadre());
  db = this.getWritableDatabase();
  long id = db.insert(VACAS_TABLE_NAME, null, values);
  return id;
 }


 }
</code></pre>
