<p>I'm trying to create a outline/stroke on a text in android. Since there is no "easy way" to create a stroke, i try to realize it with canvas. I tried this Textview extending class (OutlineTextView.java):</p>

<pre><code>import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Typeface; 
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.widget.TextView;


public class OutlineTextView extends TextView {
    public OutlineTextView(Context context) {
            super(context);
            initPaint();
    }

    public OutlineTextView(Context context, AttributeSet attrs) {
            super(context, attrs);
            initPaint();
    }

    public OutlineTextView(Context context, AttributeSet attrs, int defStyle) {
            super(context, attrs, defStyle);
            initPaint();
    }

    private void initPaint() {
            mTextPaint = new TextPaint();
            mTextPaint.setAntiAlias(true);
            mTextPaint.setTextSize(getTextSize());
            mTextPaint.setColor(mColor);
            mTextPaint.setStyle(Paint.Style.FILL);
            mTextPaint.setTypeface(getTypeface());

            mTextPaintOutline = new TextPaint();
            mTextPaintOutline.setAntiAlias(true);
            mTextPaintOutline.setTextSize(getTextSize());
            mTextPaintOutline.setColor(mBorderColor);
            mTextPaintOutline.setStyle(Paint.Style.STROKE);
            mTextPaintOutline.setTypeface(getTypeface());
            mTextPaintOutline.setStrokeWidth(mBorderSize);
    }

    public void setText(String text) {
            super.setText(text);
            mText = text.toString();
            requestLayout();
            invalidate();
    }

    public void setTextSize(float size) {
            super.setTextSize(size);
            requestLayout();
            invalidate();
            initPaint();
    }

    public void setTextColor(int color) {
            super.setTextColor(color);
            mColor = color;
            invalidate();
            initPaint();
    }

    public void setShadowLayer(float radius, float dx, float dy, int color) {
            super.setShadowLayer(radius, dx, dy, color);
            mBorderSize = radius;
            mBorderColor = color;
            requestLayout();
            invalidate();
            initPaint();
    }

    public void setTypeface(Typeface tf, int style) {
            super.setTypeface(tf, style);
            requestLayout();
            invalidate();
            initPaint();
    }

    public void setTypeface(Typeface tf) {
            super.setTypeface(tf);
            requestLayout();
            invalidate();
            initPaint();
    }

    @Override
    protected void onDraw(Canvas canvas) {
            Layout layout = new StaticLayout(getText(), mTextPaintOutline, getWidth(), Layout.Alignment.ALIGN_CENTER, mSpacingMult, mSpacingAdd, mIncludePad);
            layout.draw(canvas);
            layout = new StaticLayout(getText(), mTextPaint, getWidth(), Layout.Alignment.ALIGN_CENTER, mSpacingMult, mSpacingAdd, mIncludePad);
            layout.draw(canvas);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            Layout layout = new StaticLayout(getText(), mTextPaintOutline, measureWidth(widthMeasureSpec), Layout.Alignment.ALIGN_CENTER, mSpacingMult, mSpacingAdd, mIncludePad);
            int ex = (int) (mBorderSize * 2 + 1);
            setMeasuredDimension(measureWidth(widthMeasureSpec) + ex, measureHeight(heightMeasureSpec) * layout.getLineCount() + ex);
    }

    private int measureWidth(int measureSpec) {
            int result = 0;
            int specMode = MeasureSpec.getMode(measureSpec);
            int specSize = MeasureSpec.getSize(measureSpec);

            if (specMode == MeasureSpec.EXACTLY) {
                    result = specSize;
            } else {
                    result = (int) mTextPaintOutline.measureText(mText) + getPaddingLeft() + getPaddingRight();
                    if (specMode == MeasureSpec.AT_MOST) {
                            result = Math.min(result, specSize);
                    }
            }

            return result;
    }

    private int measureHeight(int measureSpec) {
            int result = 0;
            int specMode = MeasureSpec.getMode(measureSpec);
            int specSize = MeasureSpec.getSize(measureSpec);

            mAscent = (int) mTextPaintOutline.ascent();
            if (specMode == MeasureSpec.EXACTLY) {
                    result = specSize;
            } else {
                    result = (int) (-mAscent + mTextPaintOutline.descent()) + getPaddingTop() + getPaddingBottom();
                    if (specMode == MeasureSpec.AT_MOST) {
                            result = Math.min(result, specSize);
                    }
            }
            return result;
    }

    private TextPaint mTextPaint;
    private TextPaint mTextPaintOutline;
    private String mText = "";
    private int mAscent = 0;
    private float mBorderSize;
    private int mBorderColor;
    private int mColor;
    private float mSpacingMult = 1.0f;
    private float mSpacingAdd = 0;
    private boolean mIncludePad = true;
 }
</code></pre>

<p>I use this class in my mainactivity as following:</p>

<pre><code>    OutlineTextView t2b = new OutlineTextView(this);
t2b.setGravity(Gravity.CENTER | Gravity.CENTER_HORIZONTAL);
t2b.setTextSize(44); 
t2b.setTextColor(Color.parseColor(Color.Green));
t2b.setShadowLayer(10, 1, 1, Color.BLACK);
Typeface type2 = Typeface.createFromAsset(getAssets(),"fonts/HelveticaLTStd-Bold.otf"); 


t2b.setTypeface(type2);
t2b.setText(percentage + "%");

    fl.addView(t2b);
</code></pre>

<p>fl is a FrameLayout. The output now is a stroked text and it looks exactly as i want it. My View is a long list of tiles and on everyone of it is a stroked text. The text is not my problem. The problem is the performance while scrolling. If i scroll down or up, the performance slows down and the scolling is not smooth . I think the problem is the way i draw the stroked lines. I try many variation of the stroke text and also tried every suggested variation of stroke lines from here. Everytime i have the same problem. If i draw the text without the stroke lines (but still using OutlineTextView), it scrolls smooth again, no lags, no performance slowdowns. Just the drawing of the stroke lines seems to slow down the system.</p>

<p>P.S: This OutlineTextView.java is not my own, i just got it from the internet, since this seems to draw a stroked text.</p>

<p>I would be thankful, if anyone could help me.</p>
